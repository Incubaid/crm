"""empty message

Revision ID: 2aea228edd39
Revises: 0bfd4e50a2a7
Create Date: 2017-11-27 12:42:13.450892

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2aea228edd39'
down_revision = '0bfd4e50a2a7'
branch_labels = None
depends_on = None


### Deal States
old_deal_states = postgresql.ENUM('NEW', 'INTERESTED', 'CONFIRMED', 'PENDING', 'CLOSED' , name='dealstate')
new_deal_states = postgresql.ENUM('NEW', 'INTERESTED', 'CONFIRMED', 'CREATED', 'SIGNED', 'PAID', 'CLOSED', 'LOST' , name='dealstate')
temp_deal_states = postgresql.ENUM('NEW', 'INTERESTED', 'CONFIRMED', 'CREATED', 'SIGNED', 'PAID', 'CLOSED', 'LOST' , name='_dealstate')


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###


    # Get all deals with PENDING states
    deals_with_pending_states = []

    for record in op.get_bind().execute("select id from deals where deal_state='PENDING'").fetchall():
        deals_with_pending_states.append(record[0])
    
    # UPDATE  all deals with PENDING states to NEW state sicne we're going to rename (PENDING)
    op.get_bind().execute("update deals set deal_state='NEW' where deal_state='PENDING'")

    temp_deal_states.create(op.get_bind(), checkfirst=False)

    op.execute('ALTER TABLE deals ALTER COLUMN deal_state TYPE _dealstate'
               ' USING deal_state::text::_dealstate')

    old_deal_states.drop(op.get_bind(), checkfirst=False)
    # Create and convert to the "new" status type
    new_deal_states.create(op.get_bind(), checkfirst=False)

    op.execute('ALTER TABLE deals ALTER COLUMN deal_state TYPE dealstate'
               ' USING deal_state::text::dealstate')

    temp_deal_states.drop(op.get_bind(), checkfirst=False)

    # update Old PENDING states to (SIGNED)
    ids = ["'%s'" % d for d in deals_with_pending_states]
    if ids:
        op.get_bind().execute("update deals set deal_state='SIGNED' where id in (%s)" % ', '.join(ids))


def downgrade():
    pass
