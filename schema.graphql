schema {
  query: Query
  mutation: Mutations
}

input AddressArguments {
  streetNumber: String
  streetName: String
  city: String
  state: String
  country: String
  zipCode: String
}

type Comment implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  content: String
  companyId: String
  contactId: String
  userId: String
  dealId: String
  taskId: String
  organizationId: String
  projectId: String
  sprintId: String
  linkId: String
  authorOriginalId: String
  authorLastId: String
  deal: Deal
  company: Company
  organization: Organization
  user: User
  project: Project
  sprint: Sprint
  link: LinkType
  contact: Contact
  task: Task
}

type CommentTypeConnection {
  pageInfo: PageInfo!
  edges: [CommentTypeEdge]!
}

type CommentTypeEdge {
  node: Comment
  cursor: String!
}

type Company implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  name: String!
  description: String
  vatnumber: String
  website: String
  emails: String
  telephones: String
  ownerId: String
  ownerbackupId: String
  authorOriginalId: String
  authorLastId: String
  deals(before: String, after: String, first: Int, last: Int): DealTypeConnection
  messages(before: String, after: String, first: Int, last: Int): MessageTypeConnection
  tasks(before: String, after: String, first: Int, last: Int): TaskTypeConnection
  comments(before: String, after: String, first: Int, last: Int): CommentTypeConnection
  contacts(before: String, after: String, first: Int, last: Int): ContactTypeConnection
  links: [LinkType]
  owner: User
  ownerbackup: User
}

type CompanyTypeConnection {
  pageInfo: PageInfo!
  edges: [CompanyTypeEdge]!
}

type CompanyTypeEdge {
  node: Company
  cursor: String!
}

type Contact implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  firstname: String!
  lastname: String
  description: String
  bio: String
  beliefStatement: String
  messageChannels: String
  ownerId: String
  ownerbackupId: String
  parentId: String
  emails: String
  telephones: String
  tfApp: Boolean
  tfWeb: Boolean
  referralCode: String
  authorOriginalId: String
  authorLastId: String
  images(before: String, after: String, first: Int, last: Int): ImageTypeConnection
  deals(before: String, after: String, first: Int, last: Int): DealTypeConnection
  comments(before: String, after: String, first: Int, last: Int): CommentTypeConnection
  tasks(before: String, after: String, first: Int, last: Int): TaskTypeConnection
  messages(before: String, after: String, first: Int, last: Int): MessageTypeConnection
  links: [LinkType]
  referrer1Deals(before: String, after: String, first: Int, last: Int): DealTypeConnection
  referrer2Deals(before: String, after: String, first: Int, last: Int): DealTypeConnection
  companies(before: String, after: String, first: Int, last: Int): CompanyTypeConnection
  owner: User
  ownerbackup: User
  projects(before: String, after: String, first: Int, last: Int): ProjectTypeConnection
  sprints(before: String, after: String, first: Int, last: Int): SprintTypeConnection
  uid: String
}

type ContactTypeConnection {
  pageInfo: PageInfo!
  edges: [ContactTypeEdge]!
}

type ContactTypeEdge {
  node: Contact
  cursor: String!
}

input CreateContactArguments {
  firstname: String!
  lastname: String
  description: String
  telegram: String
  bio: String
  emails: String!
  telephones: String!
  beliefStatement: String
  ownerId: String
  ownerbackupId: String
  parentId: String
  tfApp: Boolean
  tfWeb: Boolean
  country: String
  messageChannels: String
  subGroups: [String]
  addresses: [AddressArguments]
}

type CreateContacts {
  ok: Boolean
  ids: [String]
}

input CreateDealArguments {
  name: String!
  description: String
  amount: Float
  currency: String!
  dealType: String!
  closedAt: String
  companyId: String
  contactId: String
  referralCode: String
  shippingAddresses: [AddressArguments]
}

type CreateDeals {
  ok: Boolean
  ids: [String]
}

scalar DateTime

type Deal implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  name: String!
  description: String
  amount: Float
  currency: String
  dealType: String
  dealState: String
  closedAt: DateTime
  companyId: String
  contactId: String
  referrer1Id: String
  referrer2Id: String
  isPaid: Boolean
  referralCode: String
  authorOriginalId: String
  authorLastId: String
  referrer1: Contact
  referrer2: Contact
  tasks(before: String, after: String, first: Int, last: Int): TaskTypeConnection
  comments(before: String, after: String, first: Int, last: Int): CommentTypeConnection
  messages(before: String, after: String, first: Int, last: Int): MessageTypeConnection
  links: [LinkType]
  company: Company
  contact: Contact
  uid: String
}

type DealTypeConnection {
  pageInfo: PageInfo!
  edges: [DealTypeEdge]!
}

type DealTypeEdge {
  node: Deal
  cursor: String!
}

type DeleteContacts {
  ok: Boolean
}

type DeleteDeals {
  ok: Boolean
}

type Image implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  name: String
  path: String
  contactId: String
  authorOriginalId: String
  authorLastId: String
  contact: Contact
}

type ImageTypeConnection {
  pageInfo: PageInfo!
  edges: [ImageTypeEdge]!
}

type ImageTypeEdge {
  node: Image
  cursor: String!
}

type LinkType {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: String!
  url: String!
  labels: String
  contactId: String
  userId: String
  dealId: String
  taskId: String
  organizationId: String
  projectId: String
  sprintId: String
  companyId: String
  authorOriginalId: String
  authorLastId: String
  comments(before: String, after: String, first: Int, last: Int): CommentTypeConnection
  deal: Deal
  company: Company
  organization: Organization
  user: User
  project: Project
  sprint: Sprint
  contact: Contact
  task: Task
}

type Message implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  title: String!
  content: String
  channel: String
  timeTosend: DateTime
  timeSent: DateTime
  messageAuthorId: String
  companyId: String
  contactId: String
  userId: String
  dealId: String
  taskId: String
  organizationId: String
  projectId: String
  sprintId: String
  authorOriginalId: String
  authorLastId: String
  author: User
  deal: Deal
  company: Company
  organization: Organization
  user: User
  project: Project
  sprint: Sprint
  contact: Contact
  task: Task
}

type MessageTypeConnection {
  pageInfo: PageInfo!
  edges: [MessageTypeEdge]!
}

type MessageTypeEdge {
  node: Message
  cursor: String!
}

type Mutations {
  createContacts(records: [CreateContactArguments]!): CreateContacts
  deleteContacts(uids: [String]!): DeleteContacts
  updateContacts(records: [UpdateContactContactArguments]!): UpdateContacts
  createDeals(records: [CreateDealArguments]!): CreateDeals
  deleteDeals(uids: [String]!): DeleteDeals
  updateDeals(records: [UpdateDealArguments]!): UpdateDeals
}

interface Node {
  id: ID!
}

type Organization implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  name: String!
  description: String
  emails: String
  ownerId: String
  parentId: String
  authorOriginalId: String
  authorLastId: String
  tasks(before: String, after: String, first: Int, last: Int): TaskTypeConnection
  comments(before: String, after: String, first: Int, last: Int): CommentTypeConnection
  users(before: String, after: String, first: Int, last: Int): UserTypeConnection
  links: [LinkType]
  messages(before: String, after: String, first: Int, last: Int): MessageTypeConnection
  owner: User
}

type OrganizationTypeConnection {
  pageInfo: PageInfo!
  edges: [OrganizationTypeEdge]!
}

type OrganizationTypeEdge {
  node: Organization
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Project implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  name: String!
  description: String
  startDate: DateTime
  deadline: DateTime
  promoterId: String
  guardianId: String
  authorOriginalId: String
  authorLastId: String
  comments(before: String, after: String, first: Int, last: Int): CommentTypeConnection
  links: [LinkType]
  tasks(before: String, after: String, first: Int, last: Int): TaskTypeConnection
  messages(before: String, after: String, first: Int, last: Int): MessageTypeConnection
  sprints(before: String, after: String, first: Int, last: Int): SprintTypeConnection
  contacts(before: String, after: String, first: Int, last: Int): ContactTypeConnection
  promoter: User
  guardian: User
}

type ProjectTypeConnection {
  pageInfo: PageInfo!
  edges: [ProjectTypeEdge]!
}

type ProjectTypeEdge {
  node: Project
  cursor: String!
}

type Query {
  projects: [Project]
  contacts(before: String, after: String, first: Int, last: Int): ContactTypeConnection
  contact(uid: String): Contact
  sprints: [Sprint]
  messages: [Message]
  images: [Image]
  links: [LinkType]
  organizations: [Organization]
  tasks: [Task]
  companies: [Company]
  deals(before: String, after: String, first: Int, last: Int): DealTypeConnection
  deal(uid: String): Deal
  comments: [Comment]
  users: [User]
}

type Sprint implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  name: String!
  description: String
  startDate: DateTime
  deadline: DateTime
  ownerId: String
  projectId: String
  authorOriginalId: String
  authorLastId: String
  contacts(before: String, after: String, first: Int, last: Int): ContactTypeConnection
  tasks(before: String, after: String, first: Int, last: Int): TaskTypeConnection
  comments(before: String, after: String, first: Int, last: Int): CommentTypeConnection
  links: [LinkType]
  messages(before: String, after: String, first: Int, last: Int): MessageTypeConnection
  owner: User
  project: Project
}

type SprintTypeConnection {
  pageInfo: PageInfo!
  edges: [SprintTypeEdge]!
}

type SprintTypeEdge {
  node: Sprint
  cursor: String!
}

type Task implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  title: String!
  description: String
  type: String
  priority: String
  state: String
  assigneeId: String
  deadline: DateTime!
  eta: DateTime!
  timeEstimate: Int
  timeDone: Int
  companyId: String
  contactId: String
  userId: String
  dealId: String
  organizationId: String
  projectId: String
  sprintId: String
  authorOriginalId: String
  authorLastId: String
  comments(before: String, after: String, first: Int, last: Int): CommentTypeConnection
  messages(before: String, after: String, first: Int, last: Int): MessageTypeConnection
  links: [LinkType]
  deal: Deal
  company: Company
  organization: Organization
  user: User
  assignee: User
  project: Project
  sprint: Sprint
  contact: Contact
}

type TaskTypeConnection {
  pageInfo: PageInfo!
  edges: [TaskTypeEdge]!
}

type TaskTypeEdge {
  node: Task
  cursor: String!
}

input UpdateContactContactArguments {
  firstname: String
  lastname: String
  description: String
  telegram: String
  bio: String
  emails: String
  telephones: String
  beliefStatement: String
  ownerId: String
  ownerbackupId: String
  parentId: String
  tfApp: Boolean
  tfWeb: Boolean
  country: String
  messageChannels: String
  subGroups: [String]
  addresses: [AddressArguments]
  uid: String!
}

type UpdateContacts {
  ok: Boolean
  ids: [String]
}

input UpdateDealArguments {
  name: String
  description: String
  amount: Float
  currency: String
  dealType: String
  closedAt: String
  companyId: String
  contactId: String
  referralCode: String
  shippingAddresses: [AddressArguments]
  uid: String!
  dealState: String
}

type UpdateDeals {
  ok: Boolean
  ids: [String]
}

type User implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  id: ID!
  username: String
  firstname: String
  lastname: String
  description: String
  messageChannels: String
  emails: String
  telephones: String
  authorOriginalId: String
  authorLastId: String
  tasks(before: String, after: String, first: Int, last: Int): TaskTypeConnection
  ownsTasks(before: String, after: String, first: Int, last: Int): TaskTypeConnection
  comments(before: String, after: String, first: Int, last: Int): CommentTypeConnection
  messages(before: String, after: String, first: Int, last: Int): MessageTypeConnection
  links: [LinkType]
  ownsContacts(before: String, after: String, first: Int, last: Int): ContactTypeConnection
  ownsAsBackupContacts(before: String, after: String, first: Int, last: Int): ContactTypeConnection
  ownsCompanies(before: String, after: String, first: Int, last: Int): CompanyTypeConnection
  ownsAsBackupCompanies(before: String, after: String, first: Int, last: Int): CompanyTypeConnection
  ownsOrganizations(before: String, after: String, first: Int, last: Int): OrganizationTypeConnection
  ownsSprints(before: String, after: String, first: Int, last: Int): SprintTypeConnection
  promoterProjects(before: String, after: String, first: Int, last: Int): ProjectTypeConnection
  guardianProjects(before: String, after: String, first: Int, last: Int): ProjectTypeConnection
  organizations(before: String, after: String, first: Int, last: Int): OrganizationTypeConnection
  createdMessages(before: String, after: String, first: Int, last: Int): MessageTypeConnection
}

type UserTypeConnection {
  pageInfo: PageInfo!
  edges: [UserTypeEdge]!
}

type UserTypeEdge {
  node: User
  cursor: String!
}
